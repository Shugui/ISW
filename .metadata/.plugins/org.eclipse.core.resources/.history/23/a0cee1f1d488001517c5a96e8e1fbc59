package logica;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

public class AlquilerVehiculos {
	private Collection<Sucursal> sucursales;
	private Collection<Categoria> categorias;
	private Collection<Reserva> reservas;
	private Collection<Cliente> clientes;
	
	public AlquilerVehiculos(){
		this.categorias = new ArrayList<Categoria>();
		this.sucursales = new ArrayList<Sucursal>();
		this.reservas = new ArrayList<Reserva>();
		this.clientes = new ArrayList<Cliente>();
		cargarSistema();
	}
	
	public Sucursal consultar_Sucursal(String id){
		for(Sucursal sucursal: sucursales)
			if(sucursal.getId().equals(id))
				return sucursal;
		return null;
	}
	
	public boolean añadir_Sucursal(Sucursal sucursal){
		return sucursales.add(sucursal);
	}
	
	public boolean eliminar_Sucursal(String id){
		return sucursales.remove(consultar_Sucursal(id));
	}
	
	public Categoria consultar_Categoria(String id){
		for(Categoria categoria: categorias)
			if(categoria.getId().equals(id))
				return categoria;
		return null;
	}
	
	public boolean añadir_Categoria(Categoria categoria){
		return categorias.add(categoria);
	}
	
	public boolean eliminar_Categoria(String id){
		return categorias.remove(consultar_Categoria(id));
	}
	
	public Reserva consultar_Reserva(String id){
		for(Reserva reserva: reservas)
			if(reserva.getId().equals(id))
				return reserva;
		return null;
	}
	
	public boolean añadir_Reserva(Reserva reserva){
		return reservas.add(reserva);
	}
	
	public boolean eliminar_Reserva(String id){
		return reservas.remove(consultar_Reserva(id));
	}

	public Cliente consultar_Cliente(String id){
		for(Cliente cliente: clientes)
			if(cliente.getId().equals(id))
				return cliente;
		return null;
	}
	
	public boolean añadir_Cliente(Cliente cliente){
		return clientes.add(cliente);
	}
	
	public boolean eliminar_Cliente(String id){
		return clientes.remove(consultar_Cliente(id));
	}

	public Collection<Sucursal> getSucursales() {
		return sucursales;
	}

	public void setSucursales(Collection<Sucursal> sucursales) {
		this.sucursales = sucursales;
	}

	public Collection<Categoria> getCategorias() {
		return categorias;
	}

	public void setCategorias(Collection<Categoria> categorias) {
		this.categorias = categorias;
	}

	public Collection<Reserva> getReservas() {
		return reservas;
	}

	public void setReservas(Collection<Reserva> reservas) {
		this.reservas = reservas;
	}

	public Collection<Cliente> getClientes() {
		return clientes;
	}

	public void setClientes(Collection<Cliente> clientes) {
		this.clientes = clientes;
	}
	
	
	
	private void cargarSistema(){
		Sucursal suc1 = new Sucursal("1","Camino de Vera s/n" );
		Sucursal suc2 = new Sucursal("2","Archiduque Carlos, 3" );
		
		this.añadir_Sucursal(suc2);
		this.añadir_Sucursal(suc1);
		
		Categoria cat1 = new Categoria("sedán", (float)45, (float)23, (float)0.75, (float)50.25, (float)43.23);
		Categoria cat2 = new Categoria("economy", (float)48, (float)27, (float)0.85, (float)75.25, (float)55.23);
		cat2.setCategoria(cat1);
		
		categorias.add(cat1);
		categorias.add(cat2);
		
		
		
	}
	
	public void realizarReserva(Reserva reserva){
		Cliente cliente = reserva.getCliente();
		Cliente busqueda =  this.consultar_Cliente(cliente.getId());
		
		Sucursal sucursalDevoluvionReserva = reserva.getSucursalDevolucion();
		Sucursal sucursalRecogidaReserva = reserva.getSucursalRecogida();
		Sucursal sucursalDevolucion = this.consultar_Sucursal(sucursalDevoluvionReserva.getId());
		Sucursal sucursalRecogida = this.consultar_Sucursal(sucursalRecogidaReserva.getId());
		if(sucursalDevolucion != null && sucursalRecogida != null){
			if (busqueda != null){ 							//Cliente ya registrado
				this.añadir_Reserva(reserva);
				busqueda.añadir_Reserva(reserva);
			}else{											//No hay registro del cliente
				this.añadir_Cliente(cliente);
				this.añadir_Reserva(reserva);
				cliente.añadir_Reserva(reserva);						
			}
			sucursalDevolucion.añadir_ReservaDevolucion(reserva);
			sucursalRecogida.añadir_ReservaRecogida(reserva);
		}
	}
	
	public Collection <Reserva> listarReservasSucursal(String id){
		Sucursal sucursal = consultar_Sucursal(id) ;
		if(sucursal != null){
			Collection <Reserva> reservas = sucursal.getReservasDevolucion();
			reservas.addAll(sucursal.getReservasRecogida());
			return reservas;
		}
		return null;
	}
	
	public void crearReserva(String id){
		Cliente cliente = consultar_Cliente(id);
		if(cliente == null){
		//creo un nuevo cliente
		}
		LocalDate fechaRecogida = solicitarFechaRecogida();
		LocalDate fechaDevolucion = solicitarFechaDevolucion();
		Sucursal sucursalRecogida = solicitarSucursalRecogida();
		Sucursal sucursalDevolucion = solicitarSucursalDevolucion();
		Categoria categoria = solicitarCategoria();
		String modalidad = solicitarModalidad();
		
		Reserva reserva = new Reserva(id, fechaRecogida, fechaDevolucion, modalidad, cliente, categoria, sucursalRecogida, sucursalDevolucion);
		realizarReserva(reserva);
			
	}

	
	public LocalDate solicitarFechaRecogida(){
		LocalDate fechaRecogida = null;
		return fechaRecogida;
	}
	
	public LocalDate solicitarFechaDevolucion(){
		LocalDate fechaDevolucion = null;
		return fechaDevolucion;
	}
	
	public Sucursal solicitarSucursalDevolucion(){
		Sucursal sucursalDevolucion = null;
		return sucursalDevolucion;
	}
	public Sucursal solicitarSucursalRecogida(){
		Sucursal sucursalRecogida = null;
		return sucursalRecogida;
	}
	public Categoria solicitarCategoria(){
		Categoria categoria = null;
		return categoria;
	}
	public String solicitarModalidad(){
		String modalidad = null;
		return modalidad;
	}

	public void crearCliente(String nombre, String direccion, String poblacion, int cp, LocalDate fechaCarne, int digitosTC, int mesTC, int añoTC, int cvcTC, String tipoTC ){
		Cliente cliente = new Cliente("Test", nombre, direccion, poblacion, cp, fechaCarne, digitosTC, mesTC, añoTC, cvcTC, tipoTC);
		cliente.setAlquilerVehiculos(this);
		clientes.add(cliente);
	}
}
